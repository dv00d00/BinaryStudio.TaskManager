@using BinaryStudio.TaskManager.Web.Models;
@using PerpetuumSoft.Knockout;
@model ListEventViewModel
           
<script src="../../Scripts/knockout-2.1.0.js" type="text/javascript"></script>
<script src="../../Scripts/knockout.mapping-latest.js" type="text/javascript"></script>
<script src="../../Scripts/perpetuum.knockout.js" type="text/javascript"></script>

 @{
  var ko = Html.CreateKnockoutContext();
 }    
 
    
@ko.Html.Hidden()
<div class="container-fluid" style="margin-top: 30px">
    <h2>My news</h2>
    
    <div class="row-fluid">
        <div class="span2">
            <!--Sidebar content-->
            <div class="row-fluid">
                <div class="span6">
                    <ul class="nav nav-pills nav-stacked">
        
                        <li class="active">
                           @* <a href="#" id="1" >All</a> *@
                            @ko.Html.HyperlinkButton("All", "GetNews", "Events", new { type=1})
                        </li>
                        <li>
                            
                            @ko.Html.HyperlinkButton("Only my", "GetNews", "Events", new { type=2})
                            @* <a href="#" id="2"  >Only my</a> *@
                        </li>
                        @foreach (var project in Model.Projects)
                        {
                            <li>
                            @ko.Html.HyperlinkButton(project.ProjectName.ToString(), "GetNews", "Events", new { type = 3, projectId=project.ProjectId })
                            </li>
                        } 
                    </ul>
                </div>
            </div>
            <button class="btn btn-inverse all_read">Mark all news as read</button>
        </div>
        <div class="span8">
            @{
                
                @*foreach (EventViewModel event_ in ko.Model) *@
                using (var event_ = ko.Foreach(m => m.Events))
                {
                    using (event_.If(x => x.IsVisible))
                    {

                        <div @event_.Bind.Attr("class", e => e.ContainerClassName).Attr("id", e => e.NewsId)>
                            <strong>
                            
                                <a @event_.Bind.Attr("id", e => e.ProjectId).Text(e => e.ProjectName)> </a>
                                <br/>
                                <a @event_.Bind.Attr("href", e => e.WhoChangeLinkDetails).Text(e => e.WhoChangeUserName)> </a>
                                <span @event_.Bind.Text(e => e.Action)></span>
                                <a @event_.Bind.Attr("href", e => e.TaskLinkDetails).Text(e => e.TaskName)> </a>
                                @using (event_.If(x => x.IsMove))
                                {
                                    @:to
                                    using (event_.If(x => !x.IsAssigne))
                                    {
                                        @: unassigned
                                    }
                                    using (event_.If(x => x.IsAssigne))
                                    {
                                        <a @event_.Bind.Attr("href", e => e.WhoAssigneLinkDetails).Text(e => e.WhoAssigneUserName)> </a>
                                    }
                                }
                                
                            </strong>
                        </div>

                        <hr style="margin: 9px 0"/>
                    }
                }

            }

        </div>
    </div>
</div>

 
@ko.Initialize(Model)

<script type="text/javascript">
    $(document).ready(function () {
        $('.container.evnt_unread').live("click",function () {
            $(this).addClass('evnt_read');
            $(this).removeClass('evnt_unread');
            var nId = $(this).attr('id');
            $.ajax({
                type: "POST",
                url: "/Events/MarkAsRead",
                data: { newsId: nId },
                dataType: "json",
                traditional: true
            });
        });
        $('.all_read').click(function () {
            var unread_evnts = $('.evnt_unread');
            unread_evnts.addClass('evnt_read');
            unread_evnts.removeClass('evnt_unread');
            $.ajax({
                type: "POST",
                url: "/Events/MarkAllUnreadNewsAsRead"
            });
        });
        var clickedA = $("ul.nav.nav-pills.nav-stacked li a");
        clickedA.click(function () {
            clickedA.parent().removeClass('active')
            $(this).parent().addClass('active');
        });
    });
</script>
@ko.Apply(Model) 
 